# This is a simple language for arithmetic expressions 

import
     StupidSheet.backend.cellutils

numbers 
     number 
   
operators 
     plus   "+" 
     times  "*" 
     minus  "-" 
     div    "/" 
     equal  "="
     colon ":"
     comma ","
     semicolon ";"
     absolute "$"

brackets 
     lpar  "(" 
     rpar  ")" 


identifiers
     label

start 
     LIST
        
rules 

LIST             -> ASSIGNMENT                : "[$1]"
                  | ASSIGNMENT semicolon LIST : "[$1]+$3"
                  | ASSIGNMENT semicolon : "[$1]"

ASSIGNMENT       -> label equal EXPR : "($1,$3)"

ARGLIST          -> ARG comma ARGLIST : "[$1]+$3"
                  | ARG          : "[$1]"

ARG              -> RANGE       : "$1"
                  | EXPR        : "$1"
                  | CALCULATED  : "$1"

EXPR             -> TERM              : "$1" 
                  | TERM plus EXPR    : "[\'+\',$1,$3]"
                  | TERM minus EXPR   : "[\'-\',$1,$3]" 
   
TERM             -> FACTOR               : "$1" 
                  | FACTOR times TERM    : "[\'*\',$1,$3]"
                  | FACTOR div TERM      : "[\'/\',$1,$3]"

   
FACTOR           -> number           : "$1.val()"
                  | lpar EXPR rpar  : "[\'group\',$2]"
                  | minus FACTOR    : "-$2" 
                  | CALCULATED    	   : "$1"
                  
RANGE            -> CALCULATED colon CALCULATED   : "[\'range\',$1,$3]"

# As far as I know, this is useless, because you can only use them
# in function calls, and it's the same thing as using two ranges
MULRANGE         -> RANGE comma RANGE             : "[\'mulrange\',$1,$3]"

CALCULATED       -> absolute label: "parse_cellref([\'cellref\',\'ABS\',$2.symbolic_name])"
                  | label absolute number : "parse_cellref([\'cellref\',$1.symbolic_name,\'ABS\',str(int($3))])"
                  | absolute label absolute number : "parse_cellref([\'cellref\',\'ABS\',$2.symbolic_name,\'ABS\',str(int($4))])"
                  | label         : "parse_cellref([\'cellref\',$1.symbolic_name])"
                  | label lpar ARGLIST rpar : "[\'funcall\',$1.symbolic_name,$3]"
